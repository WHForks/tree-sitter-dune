=====
copy#
=====

(rule
 (targets setup.ml)
 (mode fallback)
 (action
  (copy# setup.defaults.ml setup.ml)))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (file_name
      (atom))
    (field_name)
    (sexp
      (atom))
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (file_name
        (atom)))))

======
system
======

(rule
 (alias sleep1-and-fail)
 (action
  (system "sleep 1; exit 1")))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (alias_name
      (atom))
    (field_name)
    (action
      (action_name)
      (shell_command
        (quoted_string)))))

====
bash
====

(rule
 (alias locks)
 (deps
  (glob_files *.{foo,bar}))
 (action
  (bash
   "echo 'expected result: 10'\necho 'without locking:' $(< x)\necho 'with locking:   ' $(< y)\nrm -f *.{foo,bar} x y")))

------

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (alias_name
      (atom))
    (field_name)
    (sexps1
      (sexp
        (list
          (sexp
            (atom))
          (sexp
            (atom)))))
    (field_name)
    (action
      (action_name)
      (shell_command
        (quoted_string)))))

==============
with-stdout-to
==============

(rule
 (with-stdout-to
  incr.ml
  (echo
   "let fn = Sys.argv.(1) in\nlet x =\n  match open_in fn with\n  | ic ->\n    let x = int_of_string (input_line ic) in\n    close_in ic;\n    x\n  | exception _ -> 0\nin\nUnix.sleepf 0.2;\nPrintf.fprintf (open_out fn) \"%d\\n\" (x + 1);\nPrintf.fprintf (open_out Sys.argv.(2)) \"%g\n%!\" (Sys.time ())\n")))


---

(source_file
  (stanza
    (stanza_name)
    (action
      (action_name)
      (file_name
        (atom))
      (action
        (action_name)
        (quoted_string)))))

=====
progn
=====

(rule
 (targets stdout stderr)
 (action  (with-stdout-to stdout
           (with-stderr-to stderr
            (progn
             (system "echo toto")
             (system "echo titi >&2"))))))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (file_name
      (atom))
    (file_name
      (atom))
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (action
        (action_name)
        (file_name
          (atom))
        (action
          (action_name)
          (action
            (action_name)
            (shell_command
              (quoted_string)))
          (action
            (action_name)
            (shell_command
              (quoted_string))))))))

==========
write-file
==========

(rule
 (action (write-file b "It should work as well!")))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (quoted_string))))

====
copy
====

(rule
  (action (copy test_temp.ml test_a.ml))
  (package a))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (file_name
        (atom)))
    (field_name)
    (package_name
      (atom))))

====
diff
====

(rule
 (alias blah-non-existent)
 (action (diff x-non-existent x.gen)))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (alias_name
      (atom))
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (file_name
        (atom)))))

========
no-infer
========

(rule
 (targets libexample.a dllexample%{ext_dll})
 (deps (source_tree vendor))
 (action
  (no-infer
   (progn
    (copy vendor/libexample.a libexample.a)
    (copy vendor/libexample%{ext_dll} dllexample%{ext_dll})))))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (file_name
      (atom))
    (file_name
      (atom))
    (field_name)
    (sexps1
      (sexp
        (list
          (sexp
            (atom))
          (sexp
            (atom)))))
    (field_name)
    (action
      (action_name)
      (action
        (action_name)
        (action
          (action_name)
          (file_name
            (atom))
          (file_name
            (atom)))
        (action
          (action_name)
          (file_name
            (atom))
          (file_name
            (atom)))))))

============
pipe-outputs
============

(rule
 (action
  (with-outputs-to
   config.expected
   (progn
    (pipe-outputs
     ; We need to scrub ignored config values
     (run %{bin:coqc} --config)
     (run sed "/^COQCORELIB=/d")
     (run sed "/^DOCDIR=/d")
     (run sed "/^OCAMLFIND=/d")
     (run sed "/^CAMLFLAGS=/d")
     (run sed "/^WARN=/d")
     (run sed "/^HASNATDYNLINK=/d")
     (run sed "/^COQ_SRC_SUBDIRS=/d"))
    (run %{bin:coqc} -print-version)
    (run %{bin:coqc} -print-version)))))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (action
        (action_name)
        (action
          (action_name)
          (comment)
          (action
            (action_name)
            (atom)
            (atom))
          (action
            (action_name)
            (atom)
            (quoted_string))
          (action
            (action_name)
            (atom)
            (quoted_string))
          (action
            (action_name)
            (atom)
            (quoted_string))
          (action
            (action_name)
            (atom)
            (quoted_string))
          (action
            (action_name)
            (atom)
            (quoted_string))
          (action
            (action_name)
            (atom)
            (quoted_string))
          (action
            (action_name)
            (atom)
            (quoted_string)))
        (action
          (action_name)
          (atom)
          (atom))
        (action
          (action_name)
          (atom)
          (atom))))))

=====
diff?
=====

(rule
 (alias runtest)
 (action
  (progn
   (with-stdout-to output.expected (echo "MESSAGE\n"))
   (with-stdout-to output.actual (run ./print.exe))
   (diff? output.expected output.actual))))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (alias_name
      (atom))
    (field_name)
    (action
      (action_name)
      (action
        (action_name)
        (file_name
          (atom))
        (action
          (action_name)
          (quoted_string)))
      (action
        (action_name)
        (file_name
          (atom))
        (action
          (action_name)
          (atom)))
      (action
        (action_name)
        (file_name
          (atom))
        (file_name
          (atom))))))
