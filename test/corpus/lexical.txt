========
comments
========

; this is a comment

---

(source_file
  (comment))

=======
escapes
=======

(rule (with-stdout-to b (echo "toto\r\n")))

---

(source_file
  (stanza
    (stanza_name)
    (action
      (action_name)
      (file_name_target
        (file_name
          (atom)))
      (action
        (action_name)
        (quoted_string)))))

========
newlines
========

(alias
 (name runtest)
 (action (ignore-stdout (echo "\
If you see this,
something is wrong
"))))

---

(source_file
  (stanza
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (atom))))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (list
                (sexp
                  (atom))
                (sexp
                  (list
                    (sexp
                      (atom))
                    (sexp
                      (quoted_string))))))))))))

=================
multiline strings
=================

(library
 (name driver_print_tool)
 (public_name foo.driver_print_tool)
 (kind ppx_rewriter)
 (modules ())
 (libraries compiler-libs.common)
 (ppx.driver (main "\| (fun () ->
                   "\|    Ast_mapper.run_main (fun argv ->
                   "\|      Printf.eprintf "tool name: %s\nargs:%s\n"
                   "\|        (Ast_mapper.tool_name ())
                   "\|        (String.concat " " argv);
                   "\|      Ast_mapper.default_mapper))
                   )))

; With block strings
(alias
 (name new)
 (action (echo "\> ARFLAGS=rsc
               "\> CXX=g++
               "\> CXXFLAGS="-Wall -O3 -g -pthread"
               "\> if ! ${.ARCH_SIXTYFOUR}; then
               "\>   CXX="$CXX -m32"
               "\> fi
               "\> ${.MAKE} -s -C libre2 clean
               "\> ${.MAKE} -s -C libre2 \
               "\>   ARFLAGS="$ARFLAGS" \
               "\>   CXX="$CXX" \
               "\>   CXXFLAGS="$CXXFLAGS" \
               "\>   obj/libre2.a obj/so/libre2.so
               "\> cp libre2/obj/libre2.a libre2_c_stubs.a
               "\> cp libre2/obj/so/libre2.so dllre2_c_stubs.so
               "\> ${.MAKE} -s -C libre2 clean
)))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name
      (atom))
    (field_name)
    (public_name
      (atom))
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (atom))))
    (field_name)
    (field_name)
    (library_name
      (atom))
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (multiline_string))
            (sexp
              (multiline_string))
            (sexp
              (multiline_string))
            (sexp
              (multiline_string))
            (sexp
              (multiline_string))
            (sexp
              (multiline_string)))))))
  (comment)
  (stanza
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (atom))))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (list
                (sexp
                  (atom))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))
                (sexp
                  (multiline_string))))))))))
