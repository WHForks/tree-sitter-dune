==========
Executable
==========

(executable
 (name e)
 (public_name p)
 (libraries a b c))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (public_name)
    (field_name)
    (library_name)
    (library_name)
    (library_name)))

====
Rule
====

(rule
 (mode promote)
 (alias runtest)
 (targets setup.defaults.ml)
 (deps
  (:configure %{project_root}/boot/configure.ml))
 (action
  (chdir
   %{project_root}
   (setenv
    DUNE_CONFIGURE_OUTPUT
    "src/dune_rules/setup.defaults.ml"
    (run %{ocaml} %{configure})))))

(rule
 (mode promote)
 (target assets.ml)
 (action
  (with-stdout-to
   %{target}
   (progn
    (echo "let jbuild_plugin_ml = {jbp|\n")
    (cat %{project_root}/plugin/jbuild_plugin.ml)
    (echo "|jbp}\n\n")
    (echo "let jbuild_plugin_mli = {jbp|")
    (cat %{project_root}/plugin/jbuild_plugin.mli)
    (echo "|jbp}")))))

---

(source_file
  (stanza
    (stanza_name)
    (field_rule
      (field_rule_mode
        (field_name)
        (sexp
          (atom))))
    (field_rule
      (sexp
        (list
          (sexp
            (atom))
          (sexp
            (atom)))))
    (field_rule
      (sexp
        (list
          (sexp
            (atom))
          (sexp
            (atom)))))
    (field_rule
      (field_rule_deps
        (field_name)
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (atom))))))
    (field_rule
      (field_rule_action
        (field_name)
        (action
          (sexp
            (list
              (sexp
                (atom))
              (sexp
                (atom))
              (sexp
                (list
                  (sexp
                    (atom))
                  (sexp
                    (atom))
                  (sexp
                    (atom))
                  (sexp
                    (list
                      (sexp
                        (atom))
                      (sexp
                        (atom))
                      (sexp
                        (atom))))))))))))
  (stanza
    (stanza_name)
    (field_rule
      (field_rule_mode
        (field_name)
        (sexp
          (atom))))
    (field_rule
      (field_rule_target
        (field_name)
        (atom)))
    (field_rule
      (field_rule_action
        (field_name)
        (action
          (sexp
            (list
              (sexp
                (atom))
              (sexp
                (atom))
              (sexp
                (list
                  (sexp
                    (atom))
                  (sexp
                    (list
                      (sexp
                        (atom))
                      (sexp
                        (atom))
                      (sexp
                        (atom))
                      (sexp
                        (atom))
                      (sexp
                        (atom))))
                  (sexp
                    (list
                      (sexp
                        (atom))
                      (sexp
                        (atom))))
                  (sexp
                    (list
                      (sexp
                        (atom))
                      (sexp
                        (atom))))
                  (sexp
                    (list
                      (sexp
                        (atom))
                      (sexp
                        (atom))
                      (sexp
                        (atom))
                      (sexp
                        (atom))
                      (sexp
                        (atom))))
                  (sexp
                    (list
                      (sexp
                        (atom))
                      (sexp
                        (atom))))
                  (sexp
                    (list
                      (sexp
                        (atom))
                      (sexp
                        (atom)))))))))))))

=======
Library
=======

(library
 (name dune_rules)
 (libraries stdune fs unix)
 (synopsis "Internal Dune library, do not use!")
 (instrumentation
  (backend bisect_ppx)))

---

(source_file
  (stanza
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (atom))))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (atom))
            (sexp
              (atom))
            (sexp
              (atom))))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (atom))
            (sexp
              (atom))
            (sexp
              (atom))
            (sexp
              (atom))
            (sexp
              (atom))
            (sexp
              (atom))))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (list
                (sexp
                  (atom))
                (sexp
                  (atom))))))))))
