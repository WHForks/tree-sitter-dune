==========
Executable
==========

(executable
 (name e)
 (public_name p)
 (libraries a b c))

(executable
 (name sexp_tests)
 (modules sexp_tests)
 (libraries stdune dune_lang))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name
      (atom))
    (field_name)
    (public_name
      (atom))
    (field_name)
    (library_name
      (atom))
    (library_name
      (atom))
    (library_name
      (atom)))
  (stanza
    (stanza_name)
    (field_name)
    (module_name
      (atom))
    (field_name)
    (module_name
      (atom))
    (field_name)
    (library_name
      (atom))
    (library_name
      (atom))))

====
Rule
====

(rule
 (mode promote)
 (alias runtest)
 (targets setup.defaults.ml)
 (deps
  (:configure %{project_root}/boot/configure.ml))
 (action
  (chdir
   %{project_root}
   (setenv
    DUNE_CONFIGURE_OUTPUT
    "src/dune_rules/setup.defaults.ml"
    (run %{ocaml} %{configure})))))

(rule
 (mode promote)
 (target assets.ml)
 (action
  (with-stdout-to
   %{target}
   (progn
    (echo "let jbuild_plugin_ml = {jbp|\n")
    (cat %{project_root}/plugin/jbuild_plugin.ml)
    (echo "|jbp}\n\n")
    (echo "let jbuild_plugin_mli = {jbp|")
    (cat %{project_root}/plugin/jbuild_plugin.mli)
    (echo "|jbp}")))))

(rule
 (targets my.cmxs)
 (deps plugin%{ext_lib} .dummy.objs/native/dummy__X )
 (action (run %{ocamlopt} -shared -o %{targets} %{cmxa:plugin} %{cmx:x3})))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (sexp
      (atom))
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (atom))))
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (atom))))
    (field_name)
    (sexps1
      (sexp
        (list
          (sexp
            (atom))
          (sexp
            (atom)))))
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (action
        (action_name)
        (atom)
        (quoted_string)
        (action
          (action_name)
          (atom)
          (atom)))))
  (stanza
    (stanza_name)
    (field_name)
    (sexp
      (atom))
    (field_name)
    (atom)
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (action
        (action_name)
        (action
          (action_name)
          (quoted_string))
        (action
          (action_name)
          (file_name
            (atom)))
        (action
          (action_name)
          (quoted_string))
        (action
          (action_name)
          (quoted_string))
        (action
          (action_name)
          (file_name
            (atom)))
        (action
          (action_name)
          (quoted_string)))))
  (stanza
    (stanza_name)
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (atom))))
    (field_name)
    (sexps1
      (sexp
        (atom))
      (sexp
        (atom)))
    (field_name)
    (action
      (action_name)
      (atom)
      (atom)
      (atom)
      (atom)
      (atom)
      (atom))))

=======
library
=======

(library
 (name dune_rules)
 (libraries stdune fs unix)
 (modules sha1)
 (synopsis "Internal Dune library, do not use!")
 (instrumentation
  (backend bisect_ppx)))

(library
 (name bar)
 (libraries impl1)
 (modules))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name
      (atom))
    (field_name)
    (library_name
      (atom))
    (library_name
      (atom))
    (library_name
      (atom))
    (field_name)
    (module_name
      (atom))
    (field_name)
    (quoted_string)
    (field_name)
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (atom)))))
  (stanza
    (stanza_name)
    (field_name)
    (module_name
      (atom))
    (field_name)
    (library_name
      (atom))
    (field_name)))

==========
enabled_if
==========

(rule
 (target flags.sexp)
 (enabled_if
  (= %{os_type} "Win32"))
 (action
  (with-stdout-to
   %{target}
   (echo "(-DUNICODE -D_UNICODE)"))))

(rule
 (target flags.sexp)
 (enabled_if
  (<> %{os_type} "Win32"))
 (action
  (with-stdout-to
   %{target}
   (echo "()"))))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (atom)
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (atom))
            (sexp
              (quoted_string))))))
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (action
        (action_name)
        (quoted_string))))
  (stanza
    (stanza_name)
    (field_name)
    (atom)
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (list
            (sexp
              (atom))
            (sexp
              (atom))
            (sexp
              (quoted_string))))))
    (field_name)
    (action
      (action_name)
      (file_name
        (atom))
      (action
        (action_name)
        (quoted_string)))))

=========
re_export
=========

(library
  (name        opam_repository)
  (libraries   unix (re_export opam_format))
  (wrapped     false))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name
      (atom))
    (field_name)
    (library_name
      (atom))
    (field_name)
    (library_name
      (atom))
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (atom))))))

=============
vendored_dirs
=============

(vendored_dirs *)

---

(source_file
  (stanza
    (sexp
      (list
        (sexp
          (atom))
        (sexp
          (atom))))))

======
select
======

(executable
 (name main)
 (modules a main)
 (libraries
  (select
   a.ml
   from
   (a -> a.pre_413.ml)
   (-> a.unix.ml))))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name
      (atom))
    (field_name)
    (module_name
      (atom))
    (module_name
      (atom))
    (field_name)
    (field_name)
    (sexps1
      (sexp
        (atom))
      (sexp
        (atom))
      (sexp
        (list
          (sexp
            (atom))
          (sexp
            (atom))
          (sexp
            (atom))))
      (sexp
        (list
          (sexp
            (atom))
          (sexp
            (atom)))))))
